name: Release UPM Package

# This action is manually triggered from the Actions tab in your repository
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The new version number (e.g., 1.0.1)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the repository's code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Update the package.json file with the new version
      - name: Update package.json version
        run: |
          jq '.version = "${{ github.event.inputs.version }}"'./Assets/FunticoSDK/package.json > tmp.$$.json && mv tmp.$$.json./Assets/FunticoSDK/package.json
          echo "package.json updated to version ${{ github.event.inputs.version }}"

      # 3. Sync the AuthSample directory before committing
      - name: Sync AuthSample directory
        run: |
          # Remove the old sample directory to ensure a clean state
          rm -rf./Assets/FunticoSDK/Samples~/AuthSample
          # Copy the new sample directory from the project's root Assets folder
          cp -r./Assets/AuthSample./Assets/FunticoSDK/Samples~/AuthSample
          echo "AuthSample directory synced."

      # 4. Commit and push changes if they exist
      - name: Commit and Push Changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add Assets/FunticoSDK
          
          # Commit and push only if there are staged changes
          if! git diff --staged --quiet; then
            echo "Changes detected. Committing and pushing."
            git commit -m "chore: Release version ${{ github.event.inputs.version }}"
            git push
          else
            echo "No file changes to commit."
          fi

      # 5. Create and push tag if it doesn't already exist
      - name: Create and Push Tag
        run: |
          TAG="v${{ github.event.inputs.version }}"
          
          # Check if the tag already exists on the remote repository
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
            echo "Tag $TAG already exists. Skipping tag creation."
            exit 0
          fi
          
          # If the tag doesn't exist, create and push it
          echo "Creating and pushing new tag: $TAG"
          git tag "$TAG"
          git push origin "$TAG"

      # 6. Push the commit and the new tag to the repository
      - name: Push changes and tag
        run: |
          git push
          git push --tags
